{"version":3,"file":"static/js/126.b3d7e9bb.chunk.js","mappings":"gRAEaA,E,QAAiBC,GAAAA,GAAH,wM,SCkD3B,EA9CiB,WACf,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEID,GAAa,GAFjB,SAG2BE,EAAAA,EAAAA,iBAAqBR,GAHhD,OAGUS,EAHV,OAIIL,EAAeK,GAJnB,yEAOWH,GAAa,GAPxB,6EADc,uBAAC,WAAD,wBAUdI,KACC,CAACV,IAMJ,OACE,2BACGK,IAAa,SAACM,EAAA,EAAD,IACbR,EAAYS,OAAS,IACpB,SAACd,EAAD,UAPGK,EAAYU,QAAO,SAAAC,GAAK,OAAIA,EAAMC,gBAAcC,OAAO,EAAG,IAQzCC,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIH,EAAyB,EAAzBA,aAAcI,EAAW,EAAXA,KACzC,OACE,2BACE,gBACEC,IAAG,yCAAoCL,GACvCM,IAAKF,EACLG,MAAO,OAET,wBAAKH,MANED,a,wFClCVK,E,QAAUxB,GAAAA,IAAH,qO,SCEdyB,EAAaC,SAASC,cAAc,gBAgB1C,EAde,WACb,OAAOC,EAAAA,EAAAA,eACL,SAACJ,EAAD,WACE,SAAC,KAAD,CACEK,MAAM,YACNC,OAAQ,IACRP,MAAO,IACPQ,UAAU,wBAGdN,K,qDChBaO,EAAUC,EAAQ,MAA3BC,QAEFC,EAAW,+BACXC,EAAU,2CAEV3B,EAAM,CACJ4B,oBADI,SACgBC,GAAO,OAAD,qHACPN,EAAM,GAAD,OAAIG,EAAJ,+BAAmCC,EAAnC,iBAAmDE,IADjD,cACxBC,EADwB,yBAEvBA,EAASC,MAFc,8CAK1BC,eANI,SAMWxC,GAAU,OAAD,qHACL+B,EAAM,GAAD,OAAIG,EAAJ,kBAAsBlC,EAAtB,YAAiCmC,IADjC,cACtBG,EADsB,yBAErBA,EAASC,MAFY,8CAKxBE,iBAXI,SAWaC,GAAa,OAAD,qHACVX,EAAM,GAAD,OACvBG,EADuB,+BACQQ,EADR,YACsBP,EADtB,YADK,cAC3BG,EAD2B,yBAI1BA,EAASC,KAAKI,SAJY,8CAO7BC,iBAlBI,SAkBa5C,GAAU,OAAD,qHACP+B,EAAM,GAAD,OACvBG,EADuB,kBACLlC,EADK,oBACcmC,IAFZ,cACxBG,EADwB,yBAIvBA,EAASC,KAAKM,MAJS,8CAO1BC,kBAzBI,SAyBc9C,GAAU,OAAD,qHACR+B,EAAM,GAAD,OACvBG,EADuB,kBACLlC,EADK,oBACcmC,EADd,2BADG,cACzBG,EADyB,yBAIxBA,EAASC,KAAKI,SAJU,+CAQnC","sources":["components/CastList/CastList.styled.js","components/CastList/CastList.jsx","components/Overlay/Overlay.jsx","components/Loader/Loader.jsx","service/API.tmDB.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledCastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\n  grid-gap: 16px;\n  margin: 0 auto;\n  margin-top: 30px;\n`;\n\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport API from 'service/API.tmDB';\nimport Loader from 'components/Loader/Loader';\nimport { StyledCastList } from './CastList.styled';\n\nconst CastList = () => {\n  const { movieId } = useParams();\n\n  const [allCastList, setAllCastList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetchCast() {\n      try {\n        setIsLoading(true);\n        const castList = await API.fetchCastCredits(movieId);\n        setAllCastList(castList);\n      } catch (error) {\n      } \n      finally {setIsLoading(false);}\n    }\n    fetchCast();\n  }, [movieId]);\n\n  const createCastList = () => {\n    return allCastList.filter(actor => actor.profile_path).splice(0, 20);\n  };\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {allCastList.length > 0 && (\n        <StyledCastList>\n          {createCastList().map(({ id, profile_path, name }) => {\n            return (\n              <li key={id}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                  alt={name}\n                  width={350}\n                />\n                <h3>{name}</h3>\n              </li>\n            );\n          })}\n        </StyledCastList>\n      )}\n    </div>\n  );\n};\n\nexport default CastList;\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 20;\n`;\n\n","import { createPortal } from 'react-dom';\nimport { Circles } from 'react-loader-spinner';\nimport { Overlay } from 'components/Overlay/Overlay';\n\nconst loaderRoot = document.querySelector('#loader-root');\n\nconst Loader = () => {\n  return createPortal(\n    <Overlay>\n      <Circles\n        color=\"orangered\"\n        height={300}\n        width={300}\n        ariaLabel=\"loading-indicator\"\n      />\n    </Overlay>,\n    loaderRoot\n  );\n};\n\nexport default Loader;\n","const { default: axios } = require('axios');\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'api_key=d8b0ad5d4fb786d62f1125fa68e28b99';\n\nconst API = {\n  async fetchTrendingMovies(page) {\n    const response = await axios(`${BASE_URL}/trending/movie/day?${API_KEY}&page=${page}`);\n    return response.data;\n  },\n\n  async fetchMovieById(movieId) {\n    const response = await axios(`${BASE_URL}/movie/${movieId}?${API_KEY}`);\n    return response.data;\n  },\n\n  async fetchSearchMovie(searhMovie) {\n    const response = await axios(\n      `${BASE_URL}/search/movie?query=${searhMovie}&${API_KEY}&page=1`\n    );\n    return response.data.results;\n  },\n\n  async fetchCastCredits(movieId) {\n    const response = await axios(\n      `${BASE_URL}/movie/${movieId}/credits?${API_KEY}`\n    );\n    return response.data.cast;\n  },\n\n  async fetchMovieReviwes(movieId) {\n    const response = await axios(\n      `${BASE_URL}/movie/${movieId}/reviews?${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  },\n};\n\nexport default API;\n"],"names":["StyledCastList","styled","movieId","useParams","useState","allCastList","setAllCastList","isLoading","setIsLoading","useEffect","API","castList","fetchCast","Loader","length","filter","actor","profile_path","splice","map","id","name","src","alt","width","Overlay","loaderRoot","document","querySelector","createPortal","color","height","ariaLabel","axios","require","default","BASE_URL","API_KEY","fetchTrendingMovies","page","response","data","fetchMovieById","fetchSearchMovie","searhMovie","results","fetchCastCredits","cast","fetchMovieReviwes"],"sourceRoot":""}